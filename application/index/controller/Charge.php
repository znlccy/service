<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/10/10 0010
 * Time: 下午 3:53
 */

namespace app\index\controller;

use app\index\model\RecOrder;
use app\index\model\IncidentalOrder;
use app\index\model\Invoice;
use think\Controller;
use app\index\model\ChargeRecord;
use think\Db;
use think\facade\Log;
use think\facade\Hook;

class Charge extends BasisController
{
    protected $app_id;

    public function initialize()
    {
//        Hook::listen('index_cross');
        parent::initialize(); // TODO: Change the autogenerated stub
        \Pingpp\Pingpp::setApiKey('sk_test_DejXjD9Gqj5KHifDWDKCynHC');
        \Pingpp\Pingpp::setPrivateKeyPath(PUBLIC_PATH . '/your_rsa_private_key.pem');
        $this->app_id = config('charge.app_id');
    }

    public function index()
    {
        $page = config('page.pagination');
        $page_size = request()->param('page_size/d', $page['PAGE_SIZE']);
        $jump_page = request()->param('jump_page/d', $page['JUMP_PAGE']);
        $create_start = request()->param('create_start');
        $create_end = request()->param('create_end');
        $conditions = [];
        if ($create_start && $create_end) {
            $conditions[] = ['create_time', 'between time', [$create_start, $create_end]];
        }
        // 对于UNION查询以及一些特殊的复杂查询，推荐使用这种方式首先单独查询总记录数，然后再传入分页方法
        $rec_order_count = Db::table('tb_rec_order')->count();
        $inc_order_count = Db::table('tb_incidental_order')->count();
        $total_count = intval($rec_order_count + $inc_order_count);
        $order = Db::field('id,order_no,price,status,create_time')
            ->where($conditions)
            ->table('tb_rec_order')
            ->union(function($query) use ($conditions) {
                $query->field('id,order_no,price,status,create_time')->where($conditions)->table('tb_incidental_order');
            })->order('status,create_time')
            ->paginate($page_size, $total_count, ['page' => $jump_page])
            ->each(function($item){
                // 判断是订单类型
                $order_type = mb_substr($item['order_no'],0,2);
                if ($order_type === 'XS') {
                    $item['description'] = '租赁订单缴费';
                    $order_type = 1;
                } elseif($order_type === 'ZF') {
                    $item['description'] = IncidentalOrder::where('order_no', $item['order_no'])->value('project');
                    $order_type = 2;
                } else {
                    $item['description'] = '';
                }
                if($item['status'] === 1) {
                    $invoice_status = Invoice::where(['order_type' => $order_type, 'rec_order_id' => $item['id']])->value('status');
                    if ($invoice_status === 1) {
                        $item['status'] = 2;
                    }
                }
                return $item;
            });

        return json(['code' =>200, 'data' => $order]);
    }

    /**
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 支付接口
     */
    public function pay()
    {
        $order_no = request()->param('order_no');
        $charge_type = request()->param('charge_type');
        // 获取订单信息
        $order_type = mb_substr($order_no,0,2);
        if ($order_type == 'XS') {
            // 销售订单
            $order_type = 1;
            $order_info = RecOrder::where('order_no', $order_no)->find();
        } else {
            // 杂费订单
            $order_type = 2;
            $order_info = IncidentalOrder::where('order_no', $order_no)->find();
        }
        if (!$order_info) {
            return json(['code' => 401, 'message' => '订单号有误']);
        }
        switch ($charge_type) {
            case 1:
                // 支付宝电脑网站支付
                $channel = 'alipay_pc_direct';
                $extra = ['success_url' => config('charge.success_url')];
                break;
            case 2:
                // 微信扫码支付
                $channel = 'wx_pub_qr';
                $extra = ['product_id' => $order_no];
                break;
            case 3:
                // 支付宝扫码支付
                $channel = 'alipay_qr';
                break;
            case 4:
                // 微信公众号支付
                $channel = 'wx_pub_qr';
                $extra = ['open_id' => ''];
                break;
            default:
                $channel = '';
                break;
        }
        // 查询order对象
        $charge_record = ChargeRecord::where('order_no', $order_no)->find();
        if ($charge_record) {
            // 返回的charge对象
            $charge_id = $charge_record['channel_order_no'];
            try {
                $charge = \Pingpp\Charge::retrieve($charge_id);
                echo $charge;
            } catch (\Pingpp\Error\Base $e) {
                if ($e->getHttpStatus() != null) {
                    header('Status: ' . $e->getHttpStatus());
                    return json(['code' => 401, 'message' => $e->getHttpBody()]);
                } else {
                    return json(['code' => 401, 'message' => $e->getMessage()]);
                }
            }
        } else {
            // 在ping++平台创建charge对象
            try{
                $charge = \Pingpp\Charge::create(
                    array(
                        'amount' => intval($order_info['price'] * 100),
                        'app' => ['id' => $this->app_id],
                        'order_no' => $order_no, // 商户订单号
                        'subject' => '租赁订单',
                        'currency' => 'cny',
                        'body' => 'body',
                        'channel' => $channel,
                        'extra' => $extra,
                        'client_ip' => $_SERVER['REMOTE_ADDR']
                    )
                );
                // 创建收款记录
                $data = [
                    'order_no' => $order_no,
                    'order_type' => $order_type,
                    'channel_order_no' => $charge['id'],
                    'charge_amount' => $order_info['price'],
                    'charge_type' => $charge_type,
                    'status' => 0
                ];
                $result = $this->validate($data, 'Charge');
                if (true != $result) {
                    return json(['code' => 401, 'message' => $result]);
                }
                $record = new ChargeRecord();
                $record->save($data);
                // Ping++ 返回的order 对象的id
                echo $charge;
                $order_id = $charge['id'];
            } catch (\Pingpp\Error\Base $e) {
                // 捕获报错信息
                if ($e->getHttpStatus() != null) {
                    header('Status: ' . $e->getHttpStatus());
                    return json(['code' => 401, 'message' => $e->getHttpBody()]);
                } else {
                    return json(['code' => 401, 'message' => $e->getMessage()]);
                }
            }
        }
    }

    /**
     * 支付成功通知接口
     */
    public function notify_return()
    {
        Log::info('支付记录-'. date('Y-m-d H:i:s'));
        $raw_data = file_get_contents('php://input');
        Log::info($raw_data);
        $headers = \Pingpp\Util\Util::getRequestHeaders();
        // 签名在头部信息的 x-pingplusplus-signature 字段
        $signature = isset($headers['X-Pingplusplus-Signature']) ? $headers['X-Pingplusplus-Signature'] : NULL;
        // 验证签名
        $pub_key_path = PUBLIC_PATH . "/pingplusplus_public_key.pem";
        $pub_key_contents = file_get_contents($pub_key_path);
        $verify_result = openssl_verify($raw_data, base64_decode($signature), $pub_key_contents, 'sha256');
        Log::info('回调result-'.$verify_result);
        if ($verify_result === 1) {
            // 验证通过
        } elseif ($verify_result === 0) {
            http_response_code(400);
            echo 'verification failed';
            exit;
        } else {
            http_response_code(400);
            echo 'verification error';
            exit;
        }
        $event = json_decode($raw_data, true);
        if ($event['type'] == 'charge.succeeded') {
            $charge = $event['data']['object'];
            // ...
            $order_no = $charge['order_no'];
            $order_type = mb_substr($order_no,0,2);
            if ($order_type == 'XS') {
                // 销售订单
                $order_info = RecOrder::where('order_no', $order_no)->update(['status' => 1]);
            } else {
                // 杂费订单
                $order_info = IncidentalOrder::where('order_no', $order_no)->update(['status' => 1]);
            }
            $update_data = [
                'charge_time' => date('Y-m-d H:i:s', time()),
                'operator_id' => session('user.id'),
                'status' => 1
            ];
            // 更新收款记录状态
            $order_record = ChargeRecord::where('order_no', $order_no)->update($update_data);
            http_response_code(200);
        }
    }

    /**
     * 查询charge 对象
     */
    public function retrieve()
    {
        $order_no = request()->param('order_no');
        if (empty($order_no)) {
            return json(['code' => 401, 'message' => '订单号必须填写']);
        }
        $charge_id = ChargeRecord::where('order_no', $order_no)->value('channel_order_no');
//        $charge_id = 'ch_ibnrTS4Kuvz5Xnn90KHqf9C8';
        try {
            $charge = \Pingpp\Charge::retrieve($charge_id);
            if ($charge && $charge->paid) {
                return json(['code' => 200, 'message' => '支付成功']);
            } else {
                return json(['code' => 400, 'message' => '未支付']);
            }
//            return json(['code' => 200, 'data' => $charge]);
        } catch (\Pingpp\Error\Base $e) {
            if ($e->getHttpStatus() != null) {
                header('Status: ' . $e->getHttpStatus());
                return json(['code' => 404, 'message' => $e->getHttpBody()]);
            } else {
                return json(['code' => 404, 'message' => $e->getMessage()]);
            }
        }
    }

    function verify_signature($raw_data, $signature, $pub_key_path) {
        $pub_key_contents = file_get_contents($pub_key_path);
        return openssl_verify($raw_data, base64_decode($signature), $pub_key_contents, 'sha256');
    }

    /**
     * 支付成功回调接口
     */
    public function success_return()
    {
        $charge_result = request()->param('result');
        $order_no = request()->param('out_trade_no');
        if ($charge_result === 'success') {
            return json(['code' => 200, 'message' => '支付成功']);
        }
        return json(['code' => 404, 'message' => '支付失败']);
    }


}